Index: src/gmpc-lyrics.h
===================================================================
--- src/gmpc-lyrics.h	(revision 23)
+++ src/gmpc-lyrics.h	(working copy)
@@ -16,13 +16,18 @@
 
 #include <gmpc/plugin.h>
 
+/** 
+ * We need gmpc's threading abstraction.
+ */
+#include <gmpc/qthread.h>
+
 #define __STR_SEARCH_ERROR  "Search failed."
 #define __STR_FETCH_ERROR   "Lyrics fetching failed."
 #define __STR_NOMATCH_ERROR "No match found in the lyrics database."
 #define __STR_NODATA_ERROR  "Lyrics found, but no data was extracted."
 #define __STR_NOINFO_ERROR  "Sorry, we do not have enough information to search for this song's lyrics."
 #define __STR_API_ERROR     "Incomplete lyrics API."
-
+#define __STR_FETCHING_LYRIC "Searching for lyrics....."
 #define PLUGIN_AUTH "GMPC+Lyrics+Plugin"
 
 /* Easy download */
Index: src/plugin.c
===================================================================
--- src/plugin.c	(revision 23)
+++ src/plugin.c	(working copy)
@@ -92,6 +92,16 @@
     {NULL,NULL,NULL,NULL,NULL}
   };
 
+
+
+typedef struct {
+	qthread *qt;
+	mpd_Song *song;
+	struct lyrics_api *api;
+	char *lyrics;
+	int ret;
+}lyric_thread_data;
+
 void
 lyrics_init (void)
 {
@@ -238,261 +248,316 @@
 
   return 0;
 }
+/* Function that checks if the fetch is done. 
+ * If it's done it will check if it's the lyric for the current song.
+ * if it is, it will display it
+ *
+ * This function runs in the main thread 
+ */
+static int lyric_check_fetched(lyric_thread_data *ltd)
+{
+	/* Check if the function has completed his task 
+	 * if not, return TRUE, so the timer keeps running and checks again in 1 ms*/
+	if(!qthread_is_done(ltd->qt)) return TRUE;
+	else
+	{
+		/* Get the current playing song */
+		mpd_Song *cursong = mpd_playlist_get_current_song(connection);
+		/* clean up the threading */
+		qthread_free(ltd->qt);	
+		/* Save the downloaded lyric */
+		/* If lyrics were found, save them */
+		if (!(ltd->ret) && ltd->lyrics && strlen(ltd->lyrics))
+		{
+			gchar *path = g_strdup_printf("%s/.lyrics/%s-%s.txt", g_get_home_dir(),
+					ltd->song->artist, ltd->song->title);
+			g_file_set_contents(path, ltd->lyrics, -1, NULL);
+			g_free(path);
+		}
+		/* if there is a lyric, display it. (or error) */
+		/* but only do this when it's still for the current playing song */
+		if(ltd->lyrics && cursong && !strcmp(ltd->song->file, cursong->file))
+		{
+			GtkTextBuffer *buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(lyrics_text));
+			gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), ltd->lyrics, -1);
+		}
+		/* is this the right free? */ 
+		if(ltd->lyrics) g_free(ltd->lyrics);
+		/* clean up the copy of the song we made */
+		mpd_freeSong(ltd->song);
+		/* free the struct that held the data */
+		g_free(ltd);
+	}
+	/* stop the timer */
+	return FALSE;
+}
+/* Wrapper function,
+ * This function (and everything in it)
+ * Will run in another thread 
+ */
+static void lyric_threaded_download(lyric_thread_data  *ltd)
+{
+	ltd->ret = fetch_lyrics(ltd->song, ltd->api, &(ltd->lyrics));
+}
 
-void
+	void
 lyrics_changed (GtkWidget *tree, GtkTreeIter *iter)
 {
-  GtkTextBuffer *buffer;
-  mpd_Song *song;
+	GtkTextBuffer *buffer;
+	mpd_Song *song;
 
-  if (!cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0))
-    return;
+	if (!cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0))
+		return;
 
-  if (!lyrics_text)
-    return;
+	if (!lyrics_text)
+		return;
 
-  buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(lyrics_text));
-  song = mpd_playlist_get_current_song(connection);
+	buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(lyrics_text));
+	song = mpd_playlist_get_current_song(connection);
 
-  gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), "", -1);
+	gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), "", -1);
 
-  if (song)
-    {
-      if (song->title != NULL)
-        {
-          gchar *lyrics = NULL;
-          gchar *path = NULL;
-          int id;
+	if (song)
+	{
+		if (song->title != NULL)
+		{
+			gchar *lyrics = NULL;
+			gchar *path = NULL;
+			int id;
 
-          id = cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "api-id", 0);
+			id = cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "api-id", 0);
 
-          /* If we also have artist information, check the local
-             lyrics database and eventually retreive lyrics from
-             file. */
-          if (song->artist)
-            {
-              path = g_strdup_printf("%s/.lyrics/%s-%s.txt", g_get_home_dir(),
-                                     song->artist, song->title);
-              if (g_file_test(path, G_FILE_TEST_EXISTS))
-                if (!g_file_get_contents(path, &lyrics, NULL, NULL))
-                  lyrics = NULL;
-            }
+			/* If we also have artist information, check the local
+				 lyrics database and eventually retreive lyrics from
+				 file. */
+			if (song->artist)
+			{
+				path = g_strdup_printf("%s/.lyrics/%s-%s.txt", g_get_home_dir(),
+						song->artist, song->title);
+				if (g_file_test(path, G_FILE_TEST_EXISTS))
+					if (!g_file_get_contents(path, &lyrics, NULL, NULL))
+						lyrics = NULL;
+			}
 
-          /* If we we're not able to retrieve lyrics locally, get them
-             from the Internet */
-          if (!lyrics)
-            {
-              int ret;
+			/* If we we're not able to retrieve lyrics locally, get them
+				 from the Internet */
+			if (!lyrics)
+			{
+				/* Create an struct to hold all the needed data */
+				lyric_thread_data *ltd = g_malloc0(sizeof(*ltd));
+				/* Set the data */
+				/* We need the api */
+				ltd->api = &(apis[id]);
+				/* Make a copy of the song, we can't use a pointer here
+				 * because if the search takes to long, libmpd might allready has free'ed this value
+				 */
+				ltd->song = mpd_songDup(song);
+				ltd->ret = 0;
+				/* Create the threading object */
+				ltd->qt = qthread_new((GSourceFunc)lyric_threaded_download, ltd);
+				/* run the thread */
+				qthread_run(ltd->qt);
+				/* Check every 1 ms if where done fetching the lyric. */
+				g_timeout_add(1000, (GSourceFunc)lyric_check_fetched, ltd);
+				lyrics = g_strdup(__STR_FETCHING_LYRIC);
+			}
 
-              ret = fetch_lyrics (song, &(apis[id]), &lyrics);
-
-              /* If lyrics were found, save them */
-              if (!ret && lyrics && strlen(lyrics))
-                {
-                  path = g_strdup_printf("%s/.lyrics/%s-%s.txt", g_get_home_dir(),
-                                         song->artist, song->title);
-                  g_file_set_contents(path, lyrics, -1, NULL);
-                  g_free(path);
-                }
-            }
-
-          /* Whatever the content is : lyrics or an error, display it. */
-          if (lyrics)
-            {
-              gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), lyrics, -1);
-              g_free(lyrics);
-            }
-        }
-      else
-        gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), __STR_NOINFO_ERROR, -1);
-    }
+			/* Whatever the content is : lyrics or an error, display it. */
+			if (lyrics)
+			{
+				gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), lyrics, -1);
+				g_free(lyrics);
+			}
+		}
+		else
+			gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), __STR_NOINFO_ERROR, -1);
+	}
 }
 
-void
+	void
 lyrics_song_changed_callback (MpdObj *mi, ChangedStatusType what, void *userdata)
 {
-  if (!(what & MPD_CST_SONGID))
-    return;
+	if (!(what & MPD_CST_SONGID))
+		return;
 
-  lyrics_changed (NULL, NULL);
+	lyrics_changed (NULL, NULL);
 }
 
 /** Called when regestring the plugin. Creates the entry in the left
  * panel.
  */
-void
+	void
 lyrics_add (GtkWidget *cat_tree)
 {
-  GtkTreeStore *pl3_tree = (GtkTreeStore *)gtk_tree_view_get_model(GTK_TREE_VIEW(cat_tree));
-  GtkTreeIter iter;
-  GtkTreePath *path = NULL;
+	GtkTreeStore *pl3_tree = (GtkTreeStore *)gtk_tree_view_get_model(GTK_TREE_VIEW(cat_tree));
+	GtkTreeIter iter;
+	GtkTreePath *path = NULL;
 
-  if (!cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0))
-    return;
+	if (!cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0))
+		return;
 
-  printf("Registring plugin: %i '%s'\n", plugin.id, plugin.name);
+	printf("Registring plugin: %i '%s'\n", plugin.id, plugin.name);
 
-  gtk_tree_store_append(pl3_tree, &iter, NULL);
-  gtk_tree_store_set(pl3_tree, &iter,
-                     PL3_CAT_TYPE, plugin.id,
-                     PL3_CAT_TITLE, "Song Lyrics",
-                     PL3_CAT_INT_ID, "/",
-                     PL3_CAT_ICON_ID, GTK_STOCK_EDIT,
-                     PL3_CAT_PROC, TRUE,
-                     PL3_CAT_ICON_SIZE, GTK_ICON_SIZE_DND, -1);
+	gtk_tree_store_append(pl3_tree, &iter, NULL);
+	gtk_tree_store_set(pl3_tree, &iter,
+			PL3_CAT_TYPE, plugin.id,
+			PL3_CAT_TITLE, "Song Lyrics",
+			PL3_CAT_INT_ID, "/",
+			PL3_CAT_ICON_ID, GTK_STOCK_EDIT,
+			PL3_CAT_PROC, TRUE,
+			PL3_CAT_ICON_SIZE, GTK_ICON_SIZE_DND, -1);
 
-  if (lyrics_ref)
-    {
-      gtk_tree_row_reference_free(lyrics_ref);
-      lyrics_ref = NULL;
-    }
+	if (lyrics_ref)
+	{
+		gtk_tree_row_reference_free(lyrics_ref);
+		lyrics_ref = NULL;
+	}
 
-  path = gtk_tree_model_get_path(GTK_TREE_MODEL(playlist3_get_category_tree_store()), &iter);
-  if (path)
-    {
-      lyrics_ref = gtk_tree_row_reference_new(GTK_TREE_MODEL(playlist3_get_category_tree_store()), path);
-      gtk_tree_path_free(path);
-    }
+	path = gtk_tree_model_get_path(GTK_TREE_MODEL(playlist3_get_category_tree_store()), &iter);
+	if (path)
+	{
+		lyrics_ref = gtk_tree_row_reference_new(GTK_TREE_MODEL(playlist3_get_category_tree_store()), path);
+		gtk_tree_path_free(path);
+	}
 }
 
 /** Called when the Lyrics entry is clicked on the left panel for the
  * first time.
  */
-void
+	void
 lyrics_selected (GtkWidget *container)
 {
-  if (!lyrics_view)
-    {
-      /* Text view */
-      lyrics_text = gtk_text_view_new();
-      gtk_text_view_set_editable(GTK_TEXT_VIEW(lyrics_text), FALSE);
+	if (!lyrics_view)
+	{
+		/* Text view */
+		lyrics_text = gtk_text_view_new();
+		gtk_text_view_set_editable(GTK_TEXT_VIEW(lyrics_text), FALSE);
 
-      /* Scrolled window */
-      lyrics_view = gtk_scrolled_window_new(NULL, NULL);
-      gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(lyrics_view),
-                                     GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-      gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(lyrics_view), GTK_SHADOW_ETCHED_IN);
+		/* Scrolled window */
+		lyrics_view = gtk_scrolled_window_new(NULL, NULL);
+		gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(lyrics_view),
+				GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
+		gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(lyrics_view), GTK_SHADOW_ETCHED_IN);
 
-      gtk_container_add(GTK_CONTAINER(lyrics_view), lyrics_text);
-      g_object_ref(G_OBJECT(lyrics_view));
-    }
+		gtk_container_add(GTK_CONTAINER(lyrics_view), lyrics_text);
+		g_object_ref(G_OBJECT(lyrics_view));
+	}
 
-  gtk_container_add(GTK_CONTAINER(container), lyrics_view);
-  gtk_widget_show_all(lyrics_view);
+	gtk_container_add(GTK_CONTAINER(container), lyrics_view);
+	gtk_widget_show_all(lyrics_view);
 
-  while (gtk_events_pending ())
-    gtk_main_iteration ();
+	while (gtk_events_pending ())
+		gtk_main_iteration ();
 }
 
 
 /** Called when getting out the lyrics part of the interface.
- */
-void
+*/
+	void
 lyrics_unselected(GtkWidget *container)
 {
-  gtk_container_remove(GTK_CONTAINER(container), lyrics_view);
+	gtk_container_remove(GTK_CONTAINER(container), lyrics_view);
 }
 
 /** Called when enabling the plugin from the preferences dialog. Set
  * the configuration so that we'll know that the plugin is enabled
  * afterwards.
  */
-void
+	void
 lyrics_enable_toggle (GtkWidget *wid)
 {
-  int enable = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(wid));
-  cfg_set_single_value_as_int(config, "lyrics-plugin", "enable", enable);
-  gtk_widget_set_sensitive(lyrics_pref_table, cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0));
+	int enable = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(wid));
+	cfg_set_single_value_as_int(config, "lyrics-plugin", "enable", enable);
+	gtk_widget_set_sensitive(lyrics_pref_table, cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0));
 
-  if (enable && playlist3_get_active() && !lyrics_ref)
-    lyrics_add(GTK_WIDGET(playlist3_get_category_tree_view()));
-  else if (lyrics_ref)
-    {
-      GtkTreePath *path = gtk_tree_row_reference_get_path(lyrics_ref);
+	if (enable && playlist3_get_active() && !lyrics_ref)
+		lyrics_add(GTK_WIDGET(playlist3_get_category_tree_view()));
+	else if (lyrics_ref)
+	{
+		GtkTreePath *path = gtk_tree_row_reference_get_path(lyrics_ref);
 
-      if (path)
-        {
-          GtkTreeIter iter;
+		if (path)
+		{
+			GtkTreeIter iter;
 
-          if (gtk_tree_model_get_iter(GTK_TREE_MODEL(playlist3_get_category_tree_store()), &iter, path))
-            gtk_tree_store_remove(playlist3_get_category_tree_store(), &iter);
-          gtk_tree_path_free(path);
-          gtk_tree_row_reference_free(lyrics_ref);
-          lyrics_ref = NULL;
-        }
-    }
+			if (gtk_tree_model_get_iter(GTK_TREE_MODEL(playlist3_get_category_tree_store()), &iter, path))
+				gtk_tree_store_remove(playlist3_get_category_tree_store(), &iter);
+			gtk_tree_path_free(path);
+			gtk_tree_row_reference_free(lyrics_ref);
+			lyrics_ref = NULL;
+		}
+	}
 }
 
-void
-lyrics_match_toggle (GtkWidget *wid)
+static void lyrics_match_toggle (GtkWidget *wid)
 {
-  int match = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(wid));
-  cfg_set_single_value_as_int(config, "lyrics-plugin", "exact-match", match);
+	int match = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(wid));
+	cfg_set_single_value_as_int(config, "lyrics-plugin", "exact-match", match);
 }
 
 
 /** Called when the user changes the lyrics API. Set a configuration
  * value to the new API id.
  */
-void
+	void
 lyrics_api_changed (GtkWidget *wid)
 {
-  int id = gtk_combo_box_get_active(GTK_COMBO_BOX(wid));
-  cfg_set_single_value_as_int(config, "lyrics-plugin", "api-id", id);
+	int id = gtk_combo_box_get_active(GTK_COMBO_BOX(wid));
+	cfg_set_single_value_as_int(config, "lyrics-plugin", "api-id", id);
 
-  printf("Saved API ID: %d\n", cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "api-id", 0));
+	printf("Saved API ID: %d\n", cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "api-id", 0));
 }
 
-void
+	void
 lyrics_destroy (GtkWidget *container)
 {
-  gtk_container_remove(GTK_CONTAINER(container), lyrics_pref_vbox);
+	gtk_container_remove(GTK_CONTAINER(container), lyrics_pref_vbox);
 }
 
 /** Initialize GTK widgets for the preferences window.
- */
-void
+*/
+	void
 lyrics_construct (GtkWidget *container)
 {
-  GtkWidget *enable_cg, *label, *combo, *match;
-  int i;
+	GtkWidget *enable_cg, *label, *combo, *match;
+	int i;
 
-  enable_cg = gtk_check_button_new_with_mnemonic("_Enable lyrics");
-  label = gtk_label_new("Lyrics API :");
-  combo = gtk_combo_box_new_text();
-  match = gtk_check_button_new_with_mnemonic("Exact _match only (not implemented)");
+	enable_cg = gtk_check_button_new_with_mnemonic("_Enable lyrics");
+	label = gtk_label_new("Lyrics API :");
+	combo = gtk_combo_box_new_text();
+	match = gtk_check_button_new_with_mnemonic("Exact _match only (not implemented)");
 
-  lyrics_pref_table = gtk_table_new(2, 2, FALSE);
-  lyrics_pref_vbox = gtk_vbox_new(FALSE,6);
+	lyrics_pref_table = gtk_table_new(2, 2, FALSE);
+	lyrics_pref_vbox = gtk_vbox_new(FALSE,6);
 
-  for (i=0; apis[i].name ; i++)
-    gtk_combo_box_append_text(GTK_COMBO_BOX(combo), apis[i].name);
+	for (i=0; apis[i].name ; i++)
+		gtk_combo_box_append_text(GTK_COMBO_BOX(combo), apis[i].name);
 
-  gtk_combo_box_set_active(GTK_COMBO_BOX(combo),
-                           cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "api-id", 0));
+	gtk_combo_box_set_active(GTK_COMBO_BOX(combo),
+			cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "api-id", 0));
 
-  gtk_table_attach_defaults(GTK_TABLE(lyrics_pref_table), label, 0, 1, 0, 1);
-  gtk_table_attach_defaults(GTK_TABLE(lyrics_pref_table), combo, 1, 2, 0, 1);
-  gtk_table_attach_defaults(GTK_TABLE(lyrics_pref_table), match, 0, 2, 1, 2);
+	gtk_table_attach_defaults(GTK_TABLE(lyrics_pref_table), label, 0, 1, 0, 1);
+	gtk_table_attach_defaults(GTK_TABLE(lyrics_pref_table), combo, 1, 2, 0, 1);
+	gtk_table_attach_defaults(GTK_TABLE(lyrics_pref_table), match, 0, 2, 1, 2);
 
-  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(enable_cg),
-                               cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0));
-  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(match),
-                               cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "exact-match", 1));
+	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(enable_cg),
+			cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0));
+	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(match),
+			cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "exact-match", 1));
 
-  gtk_widget_set_sensitive(lyrics_pref_table, cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0));
+	gtk_widget_set_sensitive(lyrics_pref_table, cfg_get_single_value_as_int_with_default(config, "lyrics-plugin", "enable", 0));
 
-  /* XXX: to be removed */
-  gtk_widget_set_sensitive(match, 0);
+	/* XXX: to be removed */
+	gtk_widget_set_sensitive(match, 0);
 
-  /* Connect signals */
-  g_signal_connect(G_OBJECT(combo), "changed", G_CALLBACK(lyrics_api_changed), NULL);
-  g_signal_connect(G_OBJECT(enable_cg), "toggled", G_CALLBACK(lyrics_enable_toggle), NULL);
-  g_signal_connect(G_OBJECT(match), "toggled", G_CALLBACK(lyrics_match_toggle), NULL);
+	/* Connect signals */
+	g_signal_connect(G_OBJECT(combo), "changed", G_CALLBACK(lyrics_api_changed), NULL);
+	g_signal_connect(G_OBJECT(enable_cg), "toggled", G_CALLBACK(lyrics_enable_toggle), NULL);
+	g_signal_connect(G_OBJECT(match), "toggled", G_CALLBACK(lyrics_match_toggle), NULL);
 
-  gtk_box_pack_start(GTK_BOX(lyrics_pref_vbox), enable_cg, FALSE, FALSE, 0);
-  gtk_box_pack_start(GTK_BOX(lyrics_pref_vbox), lyrics_pref_table, FALSE, FALSE, 0);
+	gtk_box_pack_start(GTK_BOX(lyrics_pref_vbox), enable_cg, FALSE, FALSE, 0);
+	gtk_box_pack_start(GTK_BOX(lyrics_pref_vbox), lyrics_pref_table, FALSE, FALSE, 0);
 
-  gtk_container_add(GTK_CONTAINER(container), lyrics_pref_vbox);
-  gtk_widget_show_all(container);
+	gtk_container_add(GTK_CONTAINER(container), lyrics_pref_vbox);
+	gtk_widget_show_all(container);
 }
