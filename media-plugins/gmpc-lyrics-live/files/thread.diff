Index: src/plugin.c
===================================================================
--- src/plugin.c	(revision 23)
+++ src/plugin.c	(working copy)
@@ -26,6 +26,7 @@
  */
 
 #include "gmpc-lyrics.h"
+#include <gmpc/qthread.h>
 
 static GtkWidget *lyrics_pref_vbox = NULL;
 static GtkWidget *lyrics_pref_table = NULL;
@@ -35,6 +36,10 @@
 /* Playlist window row reference */
 static GtkTreeRowReference *lyrics_ref = NULL;
 
+
+/* quick and dirty hack */
+static int running = FALSE;
+
 gmpcPrefPlugin lyrics_gpp = {
 	lyrics_construct,
 	lyrics_destroy
@@ -115,13 +120,26 @@
 
   return NULL;
 }
+typedef struct {
+	char *url;
+	struct easy_download *cl;
+	int retval;
+} thread_fetch;
+void fetch_lyric_real(thread_fetch *tf)
+{
+	tf->retval = easy_download(tf->url, tf->cl);
+}
 
-
 static int
 fetch_lyrics (mpd_Song *song, struct lyrics_api *api, gchar **lyrics)
 {
   struct easy_download dl = {0};
   xmlDocPtr results_doc;
+  
+ 	qthread *qt = NULL;
+	thread_fetch tf;
+  
+  
 
   gchar *search_url, *lyrics_url, *temp;
   gchar *hid = NULL;
@@ -129,10 +147,21 @@
 
   gchar *artist = NULL;
   gchar *songtitle = NULL;
-
+  
   if (!lyrics)
     return 1;
+	
+	if(running){
+	/*	*lyrics = g_strdup("Still doing fetch");
+		return 1;
+		*/
+		printf("Where executing another search while still searching... \n"
+				"I realy don't care, I'll check what to display later\n");
+	} 
+	running = TRUE;
 
+  
+
   /* Check API */
   if (!api->get_id || !api->get_lyrics ||
       !api->get_artist || !api->get_songtitle)
@@ -155,7 +184,27 @@
       g_free(temp);
     }
 
-  if (!easy_download (search_url, &dl))
+	tf.url = search_url;
+	tf.cl = &dl;
+	tf.retval = TRUE;
+	qt = qthread_new(fetch_lyric_real, &tf);
+	qthread_run(qt);
+	while(!qthread_is_done(qt)) {
+		if(gtk_events_pending())
+		{
+			gtk_main_iteration();
+		}	
+	}	
+	qthread_free(qt);
+	qt = NULL;                              	
+
+
+
+
+
+
+	
+  if (!tf.retval/*easy_download (search_url, &dl)*/)
     {
       g_free(search_url);
       *lyrics = g_strdup(__STR_SEARCH_ERROR);
@@ -190,8 +239,21 @@
   temp = g_strdup_printf("%s%s", api->host, api->lyrics_uri);
   lyrics_url = g_strdup_printf(temp, curl_escape(hid, 0));
   g_free(temp);
-
-  if (!easy_download (lyrics_url, &dl))
+	
+	tf.url = lyrics_url;
+	tf.cl = &dl;
+	tf.retval = TRUE;
+	qt = qthread_new(fetch_lyric_real, &tf);
+	qthread_run(qt);
+	while(!qthread_is_done(qt)) {
+		if(gtk_events_pending())
+		{
+			gtk_main_iteration();
+		}	
+	}	
+	qthread_free(qt);
+	qt = NULL;
+  if (!tf.retval/*easy_download (lyrics_url, &dl)*/)
     {
       xmlFree(hid);
       xmlCleanupParser();
@@ -235,7 +297,8 @@
   xmlFree(hid);
   xmlFreeDoc(results_doc);
   xmlCleanupParser();
-
+	
+	running = FALSE;
   return 0;
 }
 
@@ -256,8 +319,10 @@
 
   gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), "", -1);
 
+	
   if (song)
-    {
+  {
+		song = mpd_songDup(song);
       if (song->title != NULL)
         {
           gchar *lyrics = NULL;
@@ -289,22 +354,29 @@
               /* If lyrics were found, save them */
               if (!ret && lyrics && strlen(lyrics))
                 {
-                  path = g_strdup_printf("%s/.lyrics/%s-%s.txt", g_get_home_dir(),
-                                         song->artist, song->title);
-                  g_file_set_contents(path, lyrics, -1, NULL);
-                  g_free(path);
+	                  path = g_strdup_printf("%s/.lyrics/%s-%s.txt", g_get_home_dir(),
+  	                                       song->artist, song->title);
+    	              g_file_set_contents(path, lyrics, -1, NULL);
+      	            g_free(path);
+							
                 }
             }
 
           /* Whatever the content is : lyrics or an error, display it. */
           if (lyrics)
-            {
-              gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), lyrics, -1);
-              g_free(lyrics);
-            }
+					{
+						mpd_Song *cursong = mpd_playlist_get_current_song(connection);
+						if(cursong && !strcmp(cursong->file, song->file))
+						{                                                							
+							gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), lyrics, -1);
+							g_free(lyrics);
+						}
+
         }
-      else
+				}
+			else
         gtk_text_buffer_set_text(GTK_TEXT_BUFFER(buffer), __STR_NOINFO_ERROR, -1);
+			mpd_freeSong(song);
     }
 }
 
@@ -366,7 +438,8 @@
       /* Text view */
       lyrics_text = gtk_text_view_new();
       gtk_text_view_set_editable(GTK_TEXT_VIEW(lyrics_text), FALSE);
-
+			gtk_text_view_set_left_margin(GTK_TEXT_VIEW(lyrics_text), 6);
+			gtk_text_view_set_right_margin(GTK_TEXT_VIEW(lyrics_text), 6);
       /* Scrolled window */
       lyrics_view = gtk_scrolled_window_new(NULL, NULL);
       gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(lyrics_view),
